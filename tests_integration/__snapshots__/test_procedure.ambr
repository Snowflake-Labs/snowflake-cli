# serializer version: 1
# name: test_snowpark_procedure_flow[.gitignore]
  '''
  .packages/
  .venv/
  app.zip
  __pycache__
  
  '''
# ---
# name: test_snowpark_procedure_flow[app.py]
  '''
  from __future__ import annotations
  
  import sys
  
  from snowflake.snowpark import Session
  
  
  def hello(session: Session, name: str) -> str:
      return f"Hello {name}"
  
  
  def test(session: Session) -> str:
      return "Test procedure"
  
  
  # For local debugging. Be aware you may need to type-convert arguments if
  # you add input parameters
  if __name__ == "__main__":
      from snowcli.config import cli_config
  
      session = Session.builder.configs(cli_config.get_connection("dev")).create()
      if len(sys.argv) > 1:
          print(hello(session, *sys.argv[1:]))  # type: ignore
      else:
          print(hello(session))  # type: ignore
      session.close()
  
  '''
# ---
# name: test_snowpark_procedure_flow[requirements.txt]
  '''
  snowflake-snowpark-python
  #snowcli  # for local development
  
  '''
# ---
# name: test_snowpark_procedure_flow[snowflake.yml]
  '''
  definition_version: 1
  procedures:
    - name: hello
      handler: "app.hello"
      signature:
        - name: "name"
          type: "string"
      returns: string
    - name: test
      handler: "app.test"
      signature: ""
      returns: string
  
  '''
# ---
